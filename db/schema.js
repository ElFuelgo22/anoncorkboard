/**
 * Database Schema Definition
 * Defines the structure for the Sunset Corkboard database tables
 */

/**
 * SQL schema for the pins table
 * This should be executed in the Supabase SQL editor
 */
export const PINS_TABLE_SCHEMA = `
-- Create pins table
CREATE TABLE IF NOT EXISTS pins (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(100) NOT NULL CHECK (char_length(title) > 0),
    content TEXT NOT NULL CHECK (char_length(content) > 0 AND char_length(content) <= 500),
    author VARCHAR(50) DEFAULT 'Anonymous',
    author_id VARCHAR(100) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_pins_created_at ON pins(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_pins_author_id ON pins(author_id);
CREATE INDEX IF NOT EXISTS idx_pins_author ON pins(author);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply trigger to pins table
DROP TRIGGER IF EXISTS update_pins_updated_at ON pins;
CREATE TRIGGER update_pins_updated_at
    BEFORE UPDATE ON pins
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();
`;

/**
 * Row Level Security (RLS) policies
 * These policies ensure data security and proper access control
 */
export const RLS_POLICIES = `
-- Enable RLS on pins table
ALTER TABLE pins ENABLE ROW LEVEL SECURITY;

-- Policy: Allow all users to read pins (public corkboard)
CREATE POLICY "Allow public read access" ON pins
    FOR SELECT
    USING (true);

-- Policy: Allow all users to insert pins
CREATE POLICY "Allow public insert access" ON pins
    FOR INSERT
    WITH CHECK (true);

-- Policy: Allow users to update only their own pins
CREATE POLICY "Allow update own pins" ON pins
    FOR UPDATE
    USING (author_id = current_setting('request.jwt.claims', true)::json->>'author_id')
    WITH CHECK (author_id = current_setting('request.jwt.claims', true)::json->>'author_id');

-- Policy: Allow users to delete only their own pins (or admin)
CREATE POLICY "Allow delete own pins" ON pins
    FOR DELETE
    USING (
        author_id = current_setting('request.jwt.claims', true)::json->>'author_id'
        OR current_setting('request.jwt.claims', true)::json->>'role' = 'admin'
    );

-- Note: Since we're using anonymous auth, we'll handle ownership through author_id
-- The client will manage author_id through localStorage
`;

/**
 * Admin functions and utilities
 */
export const ADMIN_FUNCTIONS = `
-- Function to get pin statistics
CREATE OR REPLACE FUNCTION get_pin_stats()
RETURNS JSON AS $$
DECLARE
    total_count INT;
    today_count INT;
    unique_authors_count INT;
    today_start TIMESTAMP WITH TIME ZONE;
BEGIN
    -- Set today's start time
    today_start := date_trunc('day', NOW());
    
    -- Get total pins count
    SELECT COUNT(*) INTO total_count FROM pins;
    
    -- Get today's pins count
    SELECT COUNT(*) INTO today_count 
    FROM pins 
    WHERE created_at >= today_start;
    
    -- Get unique authors count (excluding Anonymous and empty)
    SELECT COUNT(DISTINCT author) INTO unique_authors_count 
    FROM pins 
    WHERE author IS NOT NULL 
    AND author != 'Anonymous' 
    AND author != '';
    
    -- Return as JSON
    RETURN json_build_object(
        'totalPins', total_count,
        'todayPins', today_count,
        'uniqueAuthors', unique_authors_count
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to clean up old pins (optional, for maintenance)
CREATE OR REPLACE FUNCTION cleanup_old_pins(days_to_keep INT DEFAULT 365)
RETURNS INT AS $$
DECLARE
    deleted_count INT;
    cutoff_date TIMESTAMP WITH TIME ZONE;
BEGIN
    -- Calculate cutoff date
    cutoff_date := NOW() - (days_to_keep || ' days')::INTERVAL;
    
    -- Delete old pins and get count
    WITH deleted AS (
        DELETE FROM pins 
        WHERE created_at < cutoff_date
        RETURNING id
    )
    SELECT COUNT(*) INTO deleted_count FROM deleted;
    
    RETURN deleted_count;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
`;

/**
 * Initial setup queries
 */
export const SETUP_QUERIES = `
-- Grant necessary permissions
GRANT USAGE ON SCHEMA public TO anon, authenticated;
GRANT ALL ON pins TO anon, authenticated;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO anon, authenticated;

-- Enable real-time for pins table
ALTER PUBLICATION supabase_realtime ADD TABLE pins;
`;

/**
 * Sample data for development/testing (optional)
 * Only use if explicitly requested for development purposes
 */
export const SAMPLE_DATA = `
-- Sample pins for development (DO NOT USE IN PRODUCTION)
INSERT INTO pins (title, content, author, author_id) VALUES
('Welcome to Sunset Corkboard', 'This is a beautiful place to share your thoughts and memories. Watch the sunset and let your creativity flow!', 'System', 'system_001'),
('Beautiful Evening', 'The colors of the sunset remind me of childhood summers by the beach. There''s something magical about the way the light dances on the water.', 'Beach Lover', 'user_001'),
('Gratitude Note', 'Today I''m grateful for small moments of peace, the warmth of the sun, and connections with others through shared experiences.', 'Thankful Soul', 'user_002');
`;

/**
 * Complete schema setup function
 */
export const COMPLETE_SETUP = `
-- Complete setup for Sunset Corkboard
-- Run this in Supabase SQL editor

${PINS_TABLE_SCHEMA}

${RLS_POLICIES}

${ADMIN_FUNCTIONS}

${SETUP_QUERIES}

-- Verify setup
DO $$
BEGIN
    -- Check if table exists
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'pins') THEN
        RAISE NOTICE 'Pins table created successfully';
    ELSE
        RAISE EXCEPTION 'Failed to create pins table';
    END IF;
    
    -- Check if RLS is enabled
    IF EXISTS (
        SELECT FROM pg_tables 
        WHERE tablename = 'pins' AND rowsecurity = true
    ) THEN
        RAISE NOTICE 'Row Level Security enabled';
    ELSE
        RAISE WARNING 'Row Level Security not enabled';
    END IF;
    
    RAISE NOTICE 'Sunset Corkboard database setup completed successfully!';
END $$;
`;

/**
 * Migration scripts for future updates
 */
export const MIGRATIONS = {
    '001_initial_setup': COMPLETE_SETUP,
    
    '002_add_indexes': `
        -- Additional indexes for performance
        CREATE INDEX IF NOT EXISTS idx_pins_title ON pins USING gin(to_tsvector('english', title));
        CREATE INDEX IF NOT EXISTS idx_pins_content ON pins USING gin(to_tsvector('english', content));
        CREATE INDEX IF NOT EXISTS idx_pins_full_text ON pins USING gin(
            to_tsvector('english', title || ' ' || content || ' ' || COALESCE(author, ''))
        );
    `,
    
    '003_add_moderation': `
        -- Add moderation fields (for future use)
        ALTER TABLE pins ADD COLUMN IF NOT EXISTS is_flagged BOOLEAN DEFAULT FALSE;
        ALTER TABLE pins ADD COLUMN IF NOT EXISTS flagged_at TIMESTAMP WITH TIME ZONE;
        ALTER TABLE pins ADD COLUMN IF NOT EXISTS flagged_reason TEXT;
        
        -- Index for moderation
        CREATE INDEX IF NOT EXISTS idx_pins_flagged ON pins(is_flagged, flagged_at);
    `
};

/**
 * Validation queries to check schema integrity
 */
export const VALIDATION_QUERIES = {
    checkTable: `
        SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = 'pins'
        ) AS table_exists;
    `,
    
    checkColumns: `
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns
        WHERE table_name = 'pins'
        ORDER BY ordinal_position;
    `,
    
    checkIndexes: `
        SELECT indexname, indexdef
        FROM pg_indexes
        WHERE tablename = 'pins'
        ORDER BY indexname;
    `,
    
    checkPolicies: `
        SELECT policyname, permissive, roles, cmd, qual, with_check
        FROM pg_policies
        WHERE tablename = 'pins'
        ORDER BY policyname;
    `,
    
    checkTriggers: `
        SELECT trigger_name, event_manipulation, action_timing, action_statement
        FROM information_schema.triggers
        WHERE event_object_table = 'pins'
        ORDER BY trigger_name;
    `
};

// Export default complete setup
export default COMPLETE_SETUP;
